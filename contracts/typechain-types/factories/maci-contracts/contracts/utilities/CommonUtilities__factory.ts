/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  CommonUtilities,
  CommonUtilitiesInterface,
} from "../../../../maci-contracts/contracts/utilities/CommonUtilities";

const _abi = [
  {
    inputs: [],
    name: "VotingPeriodNotPassed",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212208e981ab6bfea8a2b28fc76045c5fa8b8b27e2621ee2dea729ddce9bd7b18b12864736f6c63430008130033";

type CommonUtilitiesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommonUtilitiesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CommonUtilities__factory extends ContractFactory {
  constructor(...args: CommonUtilitiesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CommonUtilities & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CommonUtilities__factory {
    return super.connect(runner) as CommonUtilities__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommonUtilitiesInterface {
    return new Interface(_abi) as CommonUtilitiesInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CommonUtilities {
    return new Contract(address, _abi, runner) as unknown as CommonUtilities;
  }
}
