/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ClonableAccQueueQuinaryBlankSl,
  ClonableAccQueueQuinaryBlankSlInterface,
} from "../../../contracts/ClonableMaciContracts/ClonableAccQueueQuinaryBlankSl";

const _abi = [
  {
    inputs: [],
    name: "DepthCannotBeZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_depth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "max",
        type: "uint256",
      },
    ],
    name: "DepthTooLarge",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_depth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "min",
        type: "uint256",
      },
    ],
    name: "DepthTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidHashLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "InvalidIndex",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidLevel",
    type: "error",
  },
  {
    inputs: [],
    name: "NothingToMerge",
    type: "error",
  },
  {
    inputs: [],
    name: "SubDepthCannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "SubTreesAlreadyMerged",
    type: "error",
  },
  {
    inputs: [],
    name: "SubTreesNotMerged",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_subDepth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "max",
        type: "uint256",
      },
    ],
    name: "SubdepthTooLarge",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "HASH_LENGTH",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_DEPTH",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "calcMinHeight",
    outputs: [
      {
        internalType: "uint256",
        name: "depth",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_leaf",
        type: "uint256",
      },
    ],
    name: "enqueue",
    outputs: [
      {
        internalType: "uint256",
        name: "leafIndex",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_depth",
        type: "uint256",
      },
    ],
    name: "getMainRoot",
    outputs: [
      {
        internalType: "uint256",
        name: "mainRoot",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSmallSRTroot",
    outputs: [
      {
        internalType: "uint256",
        name: "smallSubTreeRoot",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSrIndices",
    outputs: [
      {
        internalType: "uint256",
        name: "next",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "current",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getSubRoot",
    outputs: [
      {
        internalType: "uint256",
        name: "subRoot",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "array",
        type: "uint256[2]",
      },
    ],
    name: "hash2",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[3]",
        name: "array",
        type: "uint256[3]",
      },
    ],
    name: "hash3",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[4]",
        name: "array",
        type: "uint256[4]",
      },
    ],
    name: "hash4",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[5]",
        name: "array",
        type: "uint256[5]",
      },
    ],
    name: "hash5",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "left",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "right",
        type: "uint256",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_level",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_leaf",
        type: "uint256",
      },
    ],
    name: "hashLevelLeaf",
    outputs: [
      {
        internalType: "uint256",
        name: "hashed",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_subDepth",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_subRoot",
        type: "uint256",
      },
    ],
    name: "insertSubTree",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_depth",
        type: "uint256",
      },
    ],
    name: "merge",
    outputs: [
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_numSrQueueOps",
        type: "uint256",
      },
    ],
    name: "mergeSubRoots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "numLeaves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "array",
        type: "uint256[]",
      },
    ],
    name: "sha256Hash",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "subTreesMerged",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "treeMerged",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b507f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba6065557f0404a2ed0a1df2006441895d9a65ffffdd4968cb5f555fe72a6da7aaec83e1a06066557f0b1c3d09dd575749a374a9dc1ee32af8c2312e24ad33a3e40fce8120b0f25fe36067557f1f60ed72fc1915366d2e52cfc7ddc0ff854c7aee9abbc07d1ca88ada842354dc6068557f2ca1efc603fc121baf791319195ee3ab7fa075cee664d008f9ab2870f50283606069557f2a0381fc4fb108733dfc58c355f2de753bcde61bd988eaa7d33fc967262be5ad606a557f12c6c7cce0332367373dafc95d75b98dd58980410434929dff09466a4ba262db606b557f2f212d3cc7e7334c4a10ced1be011b9cd70f73cca5522fc4137a51be8a17d18e606c557f0968ef20d515d8d743b2cf66603f8b86f3fdeee932fdc911774bb8699566e11c606d557f2e3604981890fb676c3dac1e14c5c201573f99d1b9e67025109baf274b10e9dd606e557f147d317fd4b7a1dd6cb961cfba444466b3c431ea638c8df74a89fc591d1a3a51606f557f10ea2b72952b619afd5b9bc50561df8de0c6e1ba9b5ad66b179c39c420304a756070557f1c49f7b357d244d9144676ad23f79465ef5b88ef0f91762a3d35997688af9a5a6071557f05ca0cfef8158efc5c4af44122e2765179b5463618d5c5ac6185c192332cade96072557f0ae1595634e8a2e23620f33f9b2b5a23387a28f5833814646900110842f3a1096073557f08be8c2a6a099d9cdc96f9197af6ad99595d73419eb0694eaea432fa18baa2036074557f207f689ce35cf857ee6e68c42d31bb2191d1e84d7a295ccd63995ca7369d20eb6075557f2a6f6b7e4a2cd1a6466ed17debb0a27904e99adbd72be85566a87340f41efd056076557f0f0725795350566920bbf56d3f22c4d38e832e638c9cb91811f83194e9dd74be6077557f02cd50632e5c5b00a9a93f434797725ec0f85f11ba1b6a844f0cd10c70df63926078557f08868b85d2fa4c17eec0a7d8bca4671a00474bff80e801981437b77aa11d10b56079557f294a84b7b46ea0a781877a2c0efd1ee56758d9ee55722721867efe53f4645286607a557f02cb8070979a018bb919f0d1a25d5ad3d5a376c4cf66f36d33434d221ca77e88607b557f05dfce8303f471d776762f2ddd37f05191b8bf5064d8d28e892cd4ec21e7aab4607c557f28a47617aa1e26bf42fd3b26e88aa717fd759bb92b22faaf5ad82090680b5231607d557f1de9253f5fa546603817abd83d1a13c8562f2bf6a0069a546fe546ca0c03c170607e557f1cb9bd316e341b873dbbef94fd699c6e3a638451de2817db1620235db2b6c39e607f557f0654785b2917d7c659a95738add3d8eb51cbbefc0f521c2640bc74b0fec581626080557f2eed74eacf5de60a758f815cb5e73015455c38408143fc25810d03e1ec9e35246081557f16bea3363deb4753db67be8b19110b169ae39f33113a92773c41a8b025ca5a936082557f2b0dd3b7e0a7e234a4a1b48dd0e9083dc8bfc8cd7f72abdb93a1b8e5ef3e22ed6083557f0bc1ca795d5a059b1dc0c51f72c46f2288cb139ebf09f38ac3e8bca0485ed4976084557f249ca1610a7f80bbf422388c18ef9777fcdab26ee718e2b39e4011973a902330608555611b61806104c46000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638da5cb5b116100de578063c00bdbcc11610097578063dda89a6e11610071578063dda89a6e14610324578063e93fb4d41461032e578063f2fde38b14610341578063fe4b84df1461035457600080fd5b8063c00bdbcc146102f6578063c15da65b14610309578063d9c55ce11461031c57600080fd5b80638da5cb5b146102975780639cfced97146102b2578063a27154ba146102c5578063b66c84a1146102cd578063b6a64acd146102d5578063bea140b3146102e357600080fd5b806358bfc3791161014b57806362a361bb1161012557806362a361bb1461023b57806369e7c5861461024e578063715018a61461027157806381d6a24a1461027b57600080fd5b806358bfc379146102025780635bb93995146102155780635bf1fa4d1461022857600080fd5b80631b9b8aa7146101935780631ffc735d146101b957806324a47aeb146101cc5780633bfa6fce146101df5780633dfb88b2146101e75780633e1a8cc1146101fa575b600080fd5b6101a66101a1366004611523565b610367565b6040519081526020015b60405180910390f35b6101a66101c7366004611523565b6103cd565b6101a66101da366004611523565b6104a3565b6101a6610673565b6101a66101f5366004611583565b6106a2565b6101a6610723565b6101a6610210366004611601565b610752565b6101a66102233660046116a7565b6107ec565b6101a66102363660046116a7565b610811565b6101a66102493660046116c9565b6108b0565b6101f75461026190610100900460ff1681565b60405190151581526020016101b0565b6102796108ea565b005b6101f954608a54604080519283526020830191909152016101b0565b6033546040516001600160a01b0390911681526020016101b0565b6101a66102c0366004611724565b6108fe565b6101a6602081565b6101a6600581565b6101f7546102619060ff1681565b6101a66102f136600461177d565b610938565b610279610304366004611523565b610972565b610279610317366004611523565b6109d0565b610279610b7f565b6101a66101fa5481565b6101a661033c366004611523565b610c54565b61027961034f3660046117d6565b610c8f565b610279610362366004611523565b610d05565b60006101fa548260875461037b9190611900565b10156103b1576101fa54604051627289df60e61b81526103a8918491600401918252602082015260400190565b60405180910390fd5b6101d682602181106103c5576103c561190c565b015492915050565b60006103d7610ec6565b506101fa546103e7826000610f20565b6103f2816001611922565b6101fa556104036101d66000611488565b60006101f8556101f7805460ff191690556088546101fa546104259190611935565b60000361049e57608654608b90602181106104425761044261190c565b6004020154608a805460009081526101d5602052604081209290925580549161046a83611957565b9091555050608654608b90602181106104855761048561190c565b60040201600080910181905561049e9061010f90611488565b919050565b60006104ad610ec6565b816000036104ce57604051630543d40760e11b815260040160405180910390fd5b6101f75460ff166104f257604051631e596e4360e11b815260040160405180910390fd5b602082111561051e57604051632cd31ae960e01b815260048101839052602060248201526044016103a8565b6086545b6101fa54816087546105349190611900565b101561054c578061054481611957565b915050610522565b8083101561057657604051627289df60e61b815260048101849052602481018290526044016103a8565b8083036105b2576101f8546101d684602181106105955761059561190c565b015550506101f7805461ff0019166101001790556101f854919050565b6101f8549150805b838110156106455760006105cd8261100c565b60895490915060ff16156105fe576105e3611497565b848152602081018290526105f6816108b0565b945050610632565b6106066114b5565b8481526020810182905260408101829052606081018290526080810182905261062e816108fe565b9450505b508061063d81611957565b9150506105ba565b50816101d6846021811061065b5761065b61190c565b01556101f7805461ff00191661010017905550919050565b60015b608a54816087546106879190611900565b101561069f578061069781611957565b915050610676565b90565b60405163248f667760e01b815260009073__$e61c65d9562aef5fa6ab22c0f787cf1e30$__9063248f6677906106dc908590600401611970565b602060405180830381865af41580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d91906119a1565b92915050565b6101f75460009060ff1661074a57604051631e596e4360e11b815260040160405180910390fd5b506101f85490565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160028360405160200161078891906119ba565b60408051601f19818403018152908290526107a2916119f0565b602060405180830381855afa1580156107bf573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906107e291906119a1565b61071d9190611935565b60006107f6611497565b83815260208101839052610809816108b0565b949350505050565b600061081b6114b5565b608b846021811061082e5761082e61190c565b60040201548152608b84602181106108485761084861190c565b60040201600101548160016020020152608b846021811061086b5761086b61190c565b60040201600201548160026020020152608b846021811061088e5761088e61190c565b60040201600301548160036020020152828160046020020152610809816108fe565b6040516314d2f97b60e11b815260009073__$1540826e134b1b69b7091c82576ee3aadd$__906329a5f2f6906106dc908590600401611a1f565b6108f2610ec6565b6108fc6000611021565b565b604051630926f44b60e31b815260009073__$46fbdf6658faf65265971bdad66851b86c$__90634937a258906106dc908590600401611a47565b6040516304b98e1d60e31b815260009073__$fa059fb1da6d850ca47ea49359bfe89f78$";

type ClonableAccQueueQuinaryBlankSlConstructorParams =
  | [
      linkLibraryAddresses: ClonableAccQueueQuinaryBlankSlLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClonableAccQueueQuinaryBlankSlConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class ClonableAccQueueQuinaryBlankSl__factory extends ContractFactory {
  constructor(...args: ClonableAccQueueQuinaryBlankSlConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        ClonableAccQueueQuinaryBlankSl__factory.linkBytecode(
          linkLibraryAddresses
        ),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: ClonableAccQueueQuinaryBlankSlLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$e61c65d9562aef5fa6ab22c0f787cf1e30\\$__", "g"),
      linkLibraryAddresses[
        "maci-contracts/contracts/crypto/PoseidonT5.sol:PoseidonT5"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$1540826e134b1b69b7091c82576ee3aadd\\$__", "g"),
      linkLibraryAddresses[
        "maci-contracts/contracts/crypto/PoseidonT3.sol:PoseidonT3"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$46fbdf6658faf65265971bdad66851b86c\\$__", "g"),
      linkLibraryAddresses[
        "maci-contracts/contracts/crypto/PoseidonT6.sol:PoseidonT6"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$fa059fb1da6d850ca47ea49359bfe89f78\\$__", "g"),
      linkLibraryAddresses[
        "maci-contracts/contracts/crypto/PoseidonT4.sol:PoseidonT4"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ClonableAccQueueQuinaryBlankSl & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ClonableAccQueueQuinaryBlankSl__factory {
    return super.connect(runner) as ClonableAccQueueQuinaryBlankSl__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClonableAccQueueQuinaryBlankSlInterface {
    return new Interface(_abi) as ClonableAccQueueQuinaryBlankSlInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ClonableAccQueueQuinaryBlankSl {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ClonableAccQueueQuinaryBlankSl;
  }
}

export interface ClonableAccQueueQuinaryBlankSlLibraryAddresses {
  ["maci-contracts/contracts/crypto/PoseidonT5.sol:PoseidonT5"]: string;
  ["maci-contracts/contracts/crypto/PoseidonT3.sol:PoseidonT3"]: string;
  ["maci-contracts/contracts/crypto/PoseidonT6.sol:PoseidonT6"]: string;
  ["maci-contracts/contracts/crypto/PoseidonT4.sol:PoseidonT4"]: string;
}
