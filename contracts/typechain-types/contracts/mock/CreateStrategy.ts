/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace CreateStrategy {
  export type InitializeParamsStruct = {
    registryGating: boolean;
    metadataRequired: boolean;
    reviewThreshold: BigNumberish;
    registrationStartTime: BigNumberish;
    registrationEndTime: BigNumberish;
    allocationStartTime: BigNumberish;
    allocationEndTime: BigNumberish;
    maxVoiceCreditsPerAllocator: BigNumberish;
  };

  export type InitializeParamsStructOutput = [
    registryGating: boolean,
    metadataRequired: boolean,
    reviewThreshold: bigint,
    registrationStartTime: bigint,
    registrationEndTime: bigint,
    allocationStartTime: bigint,
    allocationEndTime: bigint,
    maxVoiceCreditsPerAllocator: bigint
  ] & {
    registryGating: boolean;
    metadataRequired: boolean;
    reviewThreshold: bigint;
    registrationStartTime: bigint;
    registrationEndTime: bigint;
    allocationStartTime: bigint;
    allocationEndTime: bigint;
    maxVoiceCreditsPerAllocator: bigint;
  };
}

export declare namespace DomainObjs {
  export type PubKeyStruct = { x: BigNumberish; y: BigNumberish };

  export type PubKeyStructOutput = [x: bigint, y: bigint] & {
    x: bigint;
    y: bigint;
  };
}

export interface CreateStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Allo"
      | "Anchor"
      | "Registry"
      | "_managers"
      | "_metadata"
      | "_profileId"
      | "createQVMaciPool"
      | "getTime"
      | "poolID"
      | "strategies"
      | "strategyToMaciParams"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Allo", values?: undefined): string;
  encodeFunctionData(functionFragment: "Anchor", values?: undefined): string;
  encodeFunctionData(functionFragment: "Registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_managers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_metadata", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_profileId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createQVMaciPool",
    values: [
      CreateStrategy.InitializeParamsStruct,
      AddressLike,
      DomainObjs.PubKeyStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "getTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyToMaciParams",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "Allo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Anchor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_managers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_metadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_profileId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createQVMaciPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyToMaciParams",
    data: BytesLike
  ): Result;
}

export interface CreateStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): CreateStrategy;
  waitForDeployment(): Promise<this>;

  interface: CreateStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Allo: TypedContractMethod<[], [string], "view">;

  Anchor: TypedContractMethod<[], [string], "view">;

  Registry: TypedContractMethod<[], [string], "view">;

  _managers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  _metadata: TypedContractMethod<
    [],
    [[bigint, string] & { protocol: bigint; pointer: string }],
    "view"
  >;

  _profileId: TypedContractMethod<[], [string], "view">;

  createQVMaciPool: TypedContractMethod<
    [
      initializeParams: CreateStrategy.InitializeParamsStruct,
      coordinator: AddressLike,
      coordinatorPubKey: DomainObjs.PubKeyStruct
    ],
    [void],
    "nonpayable"
  >;

  getTime: TypedContractMethod<[], [bigint], "view">;

  poolID: TypedContractMethod<[], [bigint], "view">;

  strategies: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  strategyToMaciParams: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, DomainObjs.PubKeyStructOutput, string] & {
        coordinator: string;
        coordinatorPubKey: DomainObjs.PubKeyStructOutput;
        maciFactory: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Allo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "Anchor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "Registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_managers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "_metadata"
  ): TypedContractMethod<
    [],
    [[bigint, string] & { protocol: bigint; pointer: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "_profileId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createQVMaciPool"
  ): TypedContractMethod<
    [
      initializeParams: CreateStrategy.InitializeParamsStruct,
      coordinator: AddressLike,
      coordinatorPubKey: DomainObjs.PubKeyStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "strategies"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "strategyToMaciParams"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, DomainObjs.PubKeyStructOutput, string] & {
        coordinator: string;
        coordinatorPubKey: DomainObjs.PubKeyStructOutput;
        maciFactory: string;
      }
    ],
    "view"
  >;

  filters: {};
}
