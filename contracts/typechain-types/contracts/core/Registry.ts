/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type MetadataStruct = { protocol: BigNumberish; pointer: string };

export type MetadataStructOutput = [protocol: bigint, pointer: string] & {
  protocol: bigint;
  pointer: string;
};

export declare namespace IRegistry {
  export type ProfileStruct = {
    id: BytesLike;
    nonce: BigNumberish;
    name: string;
    metadata: MetadataStruct;
    owner: AddressLike;
    anchor: AddressLike;
  };

  export type ProfileStructOutput = [
    id: string,
    nonce: bigint,
    name: string,
    metadata: MetadataStructOutput,
    owner: string,
    anchor: string
  ] & {
    id: string;
    nonce: bigint;
    name: string;
    metadata: MetadataStructOutput;
    owner: string;
    anchor: string;
  };
}

export interface RegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ALLO_OWNER"
      | "DEFAULT_ADMIN_ROLE"
      | "NATIVE"
      | "acceptProfileOwnership"
      | "addMembers"
      | "anchorToProfileId"
      | "createProfile"
      | "getProfileByAnchor"
      | "getProfileById"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isMemberOfProfile"
      | "isOwnerOfProfile"
      | "isOwnerOrMemberOfProfile"
      | "profileIdToPendingOwner"
      | "profilesById"
      | "recoverFunds"
      | "removeMembers"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "updateProfileMetadata"
      | "updateProfileName"
      | "updateProfilePendingOwner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "ProfileCreated"
      | "ProfileMetadataUpdated"
      | "ProfileNameUpdated"
      | "ProfileOwnerUpdated"
      | "ProfilePendingOwnerUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ALLO_OWNER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NATIVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptProfileOwnership",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addMembers",
    values: [BytesLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "anchorToProfileId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [BigNumberish, string, MetadataStruct, AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileByAnchor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMemberOfProfile",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwnerOfProfile",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwnerOrMemberOfProfile",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "profileIdToPendingOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "profilesById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMembers",
    values: [BytesLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfileMetadata",
    values: [BytesLike, MetadataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfileName",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfilePendingOwner",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ALLO_OWNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NATIVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptProfileOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMembers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anchorToProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileByAnchor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMemberOfProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOwnerOfProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOwnerOrMemberOfProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "profileIdToPendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "profilesById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfileMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfileName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfilePendingOwner",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileCreatedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    nonce: BigNumberish,
    name: string,
    metadata: MetadataStruct,
    owner: AddressLike,
    anchor: AddressLike
  ];
  export type OutputTuple = [
    profileId: string,
    nonce: bigint,
    name: string,
    metadata: MetadataStructOutput,
    owner: string,
    anchor: string
  ];
  export interface OutputObject {
    profileId: string;
    nonce: bigint;
    name: string;
    metadata: MetadataStructOutput;
    owner: string;
    anchor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileMetadataUpdatedEvent {
  export type InputTuple = [profileId: BytesLike, metadata: MetadataStruct];
  export type OutputTuple = [profileId: string, metadata: MetadataStructOutput];
  export interface OutputObject {
    profileId: string;
    metadata: MetadataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileNameUpdatedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    name: string,
    anchor: AddressLike
  ];
  export type OutputTuple = [profileId: string, name: string, anchor: string];
  export interface OutputObject {
    profileId: string;
    name: string;
    anchor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileOwnerUpdatedEvent {
  export type InputTuple = [profileId: BytesLike, owner: AddressLike];
  export type OutputTuple = [profileId: string, owner: string];
  export interface OutputObject {
    profileId: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfilePendingOwnerUpdatedEvent {
  export type InputTuple = [profileId: BytesLike, pendingOwner: AddressLike];
  export type OutputTuple = [profileId: string, pendingOwner: string];
  export interface OutputObject {
    profileId: string;
    pendingOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Registry extends BaseContract {
  connect(runner?: ContractRunner | null): Registry;
  waitForDeployment(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ALLO_OWNER: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  NATIVE: TypedContractMethod<[], [string], "view">;

  acceptProfileOwnership: TypedContractMethod<
    [_profileId: BytesLike],
    [void],
    "nonpayable"
  >;

  addMembers: TypedContractMethod<
    [_profileId: BytesLike, _members: AddressLike[]],
    [void],
    "nonpayable"
  >;

  anchorToProfileId: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  createProfile: TypedContractMethod<
    [
      _nonce: BigNumberish,
      _name: string,
      _metadata: MetadataStruct,
      _owner: AddressLike,
      _members: AddressLike[]
    ],
    [string],
    "nonpayable"
  >;

  getProfileByAnchor: TypedContractMethod<
    [_anchor: AddressLike],
    [IRegistry.ProfileStructOutput],
    "view"
  >;

  getProfileById: TypedContractMethod<
    [_profileId: BytesLike],
    [IRegistry.ProfileStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  isMemberOfProfile: TypedContractMethod<
    [_profileId: BytesLike, _member: AddressLike],
    [boolean],
    "view"
  >;

  isOwnerOfProfile: TypedContractMethod<
    [_profileId: BytesLike, _owner: AddressLike],
    [boolean],
    "view"
  >;

  isOwnerOrMemberOfProfile: TypedContractMethod<
    [_profileId: BytesLike, _account: AddressLike],
    [boolean],
    "view"
  >;

  profileIdToPendingOwner: TypedContractMethod<
    [arg0: BytesLike],
    [string],
    "view"
  >;

  profilesById: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string, MetadataStructOutput, string, string] & {
        id: string;
        nonce: bigint;
        name: string;
        metadata: MetadataStructOutput;
        owner: string;
        anchor: string;
      }
    ],
    "view"
  >;

  recoverFunds: TypedContractMethod<
    [_token: AddressLike, _recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  removeMembers: TypedContractMethod<
    [_profileId: BytesLike, _members: AddressLike[]],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateProfileMetadata: TypedContractMethod<
    [_profileId: BytesLike, _metadata: MetadataStruct],
    [void],
    "nonpayable"
  >;

  updateProfileName: TypedContractMethod<
    [_profileId: BytesLike, _name: string],
    [string],
    "nonpayable"
  >;

  updateProfilePendingOwner: TypedContractMethod<
    [_profileId: BytesLike, _pendingOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ALLO_OWNER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NATIVE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptProfileOwnership"
  ): TypedContractMethod<[_profileId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addMembers"
  ): TypedContractMethod<
    [_profileId: BytesLike, _members: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "anchorToProfileId"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "createProfile"
  ): TypedContractMethod<
    [
      _nonce: BigNumberish,
      _name: string,
      _metadata: MetadataStruct,
      _owner: AddressLike,
      _members: AddressLike[]
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProfileByAnchor"
  ): TypedContractMethod<
    [_anchor: AddressLike],
    [IRegistry.ProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProfileById"
  ): TypedContractMethod<
    [_profileId: BytesLike],
    [IRegistry.ProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isMemberOfProfile"
  ): TypedContractMethod<
    [_profileId: BytesLike, _member: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOwnerOfProfile"
  ): TypedContractMethod<
    [_profileId: BytesLike, _owner: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOwnerOrMemberOfProfile"
  ): TypedContractMethod<
    [_profileId: BytesLike, _account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "profileIdToPendingOwner"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "profilesById"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string, MetadataStructOutput, string, string] & {
        id: string;
        nonce: bigint;
        name: string;
        metadata: MetadataStructOutput;
        owner: string;
        anchor: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recoverFunds"
  ): TypedContractMethod<
    [_token: AddressLike, _recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeMembers"
  ): TypedContractMethod<
    [_profileId: BytesLike, _members: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateProfileMetadata"
  ): TypedContractMethod<
    [_profileId: BytesLike, _metadata: MetadataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProfileName"
  ): TypedContractMethod<
    [_profileId: BytesLike, _name: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProfilePendingOwner"
  ): TypedContractMethod<
    [_profileId: BytesLike, _pendingOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileCreated"
  ): TypedContractEvent<
    ProfileCreatedEvent.InputTuple,
    ProfileCreatedEvent.OutputTuple,
    ProfileCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileMetadataUpdated"
  ): TypedContractEvent<
    ProfileMetadataUpdatedEvent.InputTuple,
    ProfileMetadataUpdatedEvent.OutputTuple,
    ProfileMetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileNameUpdated"
  ): TypedContractEvent<
    ProfileNameUpdatedEvent.InputTuple,
    ProfileNameUpdatedEvent.OutputTuple,
    ProfileNameUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileOwnerUpdated"
  ): TypedContractEvent<
    ProfileOwnerUpdatedEvent.InputTuple,
    ProfileOwnerUpdatedEvent.OutputTuple,
    ProfileOwnerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfilePendingOwnerUpdated"
  ): TypedContractEvent<
    ProfilePendingOwnerUpdatedEvent.InputTuple,
    ProfilePendingOwnerUpdatedEvent.OutputTuple,
    ProfilePendingOwnerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ProfileCreated(bytes32,uint256,string,tuple,address,address)": TypedContractEvent<
      ProfileCreatedEvent.InputTuple,
      ProfileCreatedEvent.OutputTuple,
      ProfileCreatedEvent.OutputObject
    >;
    ProfileCreated: TypedContractEvent<
      ProfileCreatedEvent.InputTuple,
      ProfileCreatedEvent.OutputTuple,
      ProfileCreatedEvent.OutputObject
    >;

    "ProfileMetadataUpdated(bytes32,tuple)": TypedContractEvent<
      ProfileMetadataUpdatedEvent.InputTuple,
      ProfileMetadataUpdatedEvent.OutputTuple,
      ProfileMetadataUpdatedEvent.OutputObject
    >;
    ProfileMetadataUpdated: TypedContractEvent<
      ProfileMetadataUpdatedEvent.InputTuple,
      ProfileMetadataUpdatedEvent.OutputTuple,
      ProfileMetadataUpdatedEvent.OutputObject
    >;

    "ProfileNameUpdated(bytes32,string,address)": TypedContractEvent<
      ProfileNameUpdatedEvent.InputTuple,
      ProfileNameUpdatedEvent.OutputTuple,
      ProfileNameUpdatedEvent.OutputObject
    >;
    ProfileNameUpdated: TypedContractEvent<
      ProfileNameUpdatedEvent.InputTuple,
      ProfileNameUpdatedEvent.OutputTuple,
      ProfileNameUpdatedEvent.OutputObject
    >;

    "ProfileOwnerUpdated(bytes32,address)": TypedContractEvent<
      ProfileOwnerUpdatedEvent.InputTuple,
      ProfileOwnerUpdatedEvent.OutputTuple,
      ProfileOwnerUpdatedEvent.OutputObject
    >;
    ProfileOwnerUpdated: TypedContractEvent<
      ProfileOwnerUpdatedEvent.InputTuple,
      ProfileOwnerUpdatedEvent.OutputTuple,
      ProfileOwnerUpdatedEvent.OutputObject
    >;

    "ProfilePendingOwnerUpdated(bytes32,address)": TypedContractEvent<
      ProfilePendingOwnerUpdatedEvent.InputTuple,
      ProfilePendingOwnerUpdatedEvent.OutputTuple,
      ProfilePendingOwnerUpdatedEvent.OutputObject
    >;
    ProfilePendingOwnerUpdated: TypedContractEvent<
      ProfilePendingOwnerUpdatedEvent.InputTuple,
      ProfilePendingOwnerUpdatedEvent.OutputTuple,
      ProfilePendingOwnerUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
