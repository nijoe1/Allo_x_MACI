/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IStrategy {
  export type PayoutSummaryStruct = {
    recipientAddress: AddressLike;
    amount: BigNumberish;
  };

  export type PayoutSummaryStructOutput = [
    recipientAddress: string,
    amount: bigint
  ] & { recipientAddress: string; amount: bigint };
}

export interface BaseStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NATIVE"
      | "allocate"
      | "distribute"
      | "getAllo"
      | "getPayouts"
      | "getPoolAmount"
      | "getPoolId"
      | "getRecipientStatus"
      | "getStrategyId"
      | "increasePoolAmount"
      | "initialize"
      | "isPoolActive"
      | "isValidAllocator"
      | "registerRecipient"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Allocated"
      | "Distributed"
      | "Initialized"
      | "PoolActive"
      | "Registered"
  ): EventFragment;

  encodeFunctionData(functionFragment: "NATIVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocate",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [AddressLike[], BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getAllo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPayouts",
    values: [AddressLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPoolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRecipientStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePoolAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidAllocator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRecipient",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "NATIVE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPayouts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPoolActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRecipient",
    data: BytesLike
  ): Result;
}

export namespace AllocatedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    amount: BigNumberish,
    token: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    amount: bigint,
    token: string,
    sender: string
  ];
  export interface OutputObject {
    recipientId: string;
    amount: bigint;
    token: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    recipientAddress: AddressLike,
    amount: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    recipientAddress: string,
    amount: bigint,
    sender: string
  ];
  export interface OutputObject {
    recipientId: string;
    recipientAddress: string;
    amount: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [poolId: BigNumberish, data: BytesLike];
  export type OutputTuple = [poolId: bigint, data: string];
  export interface OutputObject {
    poolId: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolActiveEvent {
  export type InputTuple = [active: boolean];
  export type OutputTuple = [active: boolean];
  export interface OutputObject {
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisteredEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    data: BytesLike,
    sender: AddressLike
  ];
  export type OutputTuple = [recipientId: string, data: string, sender: string];
  export interface OutputObject {
    recipientId: string;
    data: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BaseStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): BaseStrategy;
  waitForDeployment(): Promise<this>;

  interface: BaseStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NATIVE: TypedContractMethod<[], [string], "view">;

  allocate: TypedContractMethod<
    [_data: BytesLike, _sender: AddressLike],
    [void],
    "payable"
  >;

  distribute: TypedContractMethod<
    [_recipientIds: AddressLike[], _data: BytesLike, _sender: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllo: TypedContractMethod<[], [string], "view">;

  getPayouts: TypedContractMethod<
    [_recipientIds: AddressLike[], _data: BytesLike[]],
    [IStrategy.PayoutSummaryStructOutput[]],
    "view"
  >;

  getPoolAmount: TypedContractMethod<[], [bigint], "view">;

  getPoolId: TypedContractMethod<[], [bigint], "view">;

  getRecipientStatus: TypedContractMethod<
    [_recipientId: AddressLike],
    [bigint],
    "view"
  >;

  getStrategyId: TypedContractMethod<[], [string], "view">;

  increasePoolAmount: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_poolId: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  isPoolActive: TypedContractMethod<[], [boolean], "view">;

  isValidAllocator: TypedContractMethod<
    [_allocator: AddressLike],
    [boolean],
    "view"
  >;

  registerRecipient: TypedContractMethod<
    [_data: BytesLike, _sender: AddressLike],
    [string],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NATIVE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allocate"
  ): TypedContractMethod<
    [_data: BytesLike, _sender: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "distribute"
  ): TypedContractMethod<
    [_recipientIds: AddressLike[], _data: BytesLike, _sender: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPayouts"
  ): TypedContractMethod<
    [_recipientIds: AddressLike[], _data: BytesLike[]],
    [IStrategy.PayoutSummaryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRecipientStatus"
  ): TypedContractMethod<[_recipientId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStrategyId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increasePoolAmount"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_poolId: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPoolActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidAllocator"
  ): TypedContractMethod<[_allocator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerRecipient"
  ): TypedContractMethod<
    [_data: BytesLike, _sender: AddressLike],
    [string],
    "payable"
  >;

  getEvent(
    key: "Allocated"
  ): TypedContractEvent<
    AllocatedEvent.InputTuple,
    AllocatedEvent.OutputTuple,
    AllocatedEvent.OutputObject
  >;
  getEvent(
    key: "Distributed"
  ): TypedContractEvent<
    DistributedEvent.InputTuple,
    DistributedEvent.OutputTuple,
    DistributedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "PoolActive"
  ): TypedContractEvent<
    PoolActiveEvent.InputTuple,
    PoolActiveEvent.OutputTuple,
    PoolActiveEvent.OutputObject
  >;
  getEvent(
    key: "Registered"
  ): TypedContractEvent<
    RegisteredEvent.InputTuple,
    RegisteredEvent.OutputTuple,
    RegisteredEvent.OutputObject
  >;

  filters: {
    "Allocated(address,uint256,address,address)": TypedContractEvent<
      AllocatedEvent.InputTuple,
      AllocatedEvent.OutputTuple,
      AllocatedEvent.OutputObject
    >;
    Allocated: TypedContractEvent<
      AllocatedEvent.InputTuple,
      AllocatedEvent.OutputTuple,
      AllocatedEvent.OutputObject
    >;

    "Distributed(address,address,uint256,address)": TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;
    Distributed: TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;

    "Initialized(uint256,bytes)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "PoolActive(bool)": TypedContractEvent<
      PoolActiveEvent.InputTuple,
      PoolActiveEvent.OutputTuple,
      PoolActiveEvent.OutputObject
    >;
    PoolActive: TypedContractEvent<
      PoolActiveEvent.InputTuple,
      PoolActiveEvent.OutputTuple,
      PoolActiveEvent.OutputObject
    >;

    "Registered(address,bytes,address)": TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
    Registered: TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
  };
}
