/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ContrantsInterface extends Interface {
  getFunction(nameOrSignature: "TREE_ARITY"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Allocated"
      | "AllocatorAdded"
      | "AllocatorRemoved"
      | "MaciSet"
      | "RecipientStatusUpdated"
      | "RecipientVotingOptionAdded"
      | "Reviewed"
      | "TallyPublished"
      | "TallyResultsAdded"
      | "TimestampsUpdated"
      | "UpdatedRegistration"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "TREE_ARITY",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "TREE_ARITY", data: BytesLike): Result;
}

export namespace AllocatedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    votes: BigNumberish,
    allocator: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    votes: bigint,
    allocator: string
  ];
  export interface OutputObject {
    recipientId: string;
    votes: bigint;
    allocator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllocatorAddedEvent {
  export type InputTuple = [allocator: AddressLike, sender: AddressLike];
  export type OutputTuple = [allocator: string, sender: string];
  export interface OutputObject {
    allocator: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllocatorRemovedEvent {
  export type InputTuple = [allocator: AddressLike, sender: AddressLike];
  export type OutputTuple = [allocator: string, sender: string];
  export interface OutputObject {
    allocator: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaciSetEvent {
  export type InputTuple = [
    maci: AddressLike,
    poll: AddressLike,
    messageProcessor: AddressLike,
    tally: AddressLike,
    subsidy: AddressLike
  ];
  export type OutputTuple = [
    maci: string,
    poll: string,
    messageProcessor: string,
    tally: string,
    subsidy: string
  ];
  export interface OutputObject {
    maci: string;
    poll: string;
    messageProcessor: string;
    tally: string;
    subsidy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientStatusUpdatedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    applicationId: BigNumberish,
    status: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    applicationId: bigint,
    status: bigint,
    sender: string
  ];
  export interface OutputObject {
    recipientId: string;
    applicationId: bigint;
    status: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientVotingOptionAddedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    recipientIndex: BigNumberish
  ];
  export type OutputTuple = [recipientId: string, recipientIndex: bigint];
  export interface OutputObject {
    recipientId: string;
    recipientIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    applicationId: BigNumberish,
    status: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    applicationId: bigint,
    status: bigint,
    sender: string
  ];
  export interface OutputObject {
    recipientId: string;
    applicationId: bigint;
    status: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TallyPublishedEvent {
  export type InputTuple = [tallyHash: string];
  export type OutputTuple = [tallyHash: string];
  export interface OutputObject {
    tallyHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TallyResultsAddedEvent {
  export type InputTuple = [voteOptionIndex: BigNumberish, tally: BigNumberish];
  export type OutputTuple = [voteOptionIndex: bigint, tally: bigint];
  export interface OutputObject {
    voteOptionIndex: bigint;
    tally: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimestampsUpdatedEvent {
  export type InputTuple = [
    registrationStartTime: BigNumberish,
    registrationEndTime: BigNumberish,
    allocationStartTime: BigNumberish,
    allocationEndTime: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    registrationStartTime: bigint,
    registrationEndTime: bigint,
    allocationStartTime: bigint,
    allocationEndTime: bigint,
    sender: string
  ];
  export interface OutputObject {
    registrationStartTime: bigint;
    registrationEndTime: bigint;
    allocationStartTime: bigint;
    allocationEndTime: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedRegistrationEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    applicationId: BigNumberish,
    data: BytesLike,
    sender: AddressLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    recipientId: string,
    applicationId: bigint,
    data: string,
    sender: string,
    status: bigint
  ];
  export interface OutputObject {
    recipientId: string;
    applicationId: bigint;
    data: string;
    sender: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Contrants extends BaseContract {
  connect(runner?: ContractRunner | null): Contrants;
  waitForDeployment(): Promise<this>;

  interface: ContrantsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TREE_ARITY: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TREE_ARITY"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Allocated"
  ): TypedContractEvent<
    AllocatedEvent.InputTuple,
    AllocatedEvent.OutputTuple,
    AllocatedEvent.OutputObject
  >;
  getEvent(
    key: "AllocatorAdded"
  ): TypedContractEvent<
    AllocatorAddedEvent.InputTuple,
    AllocatorAddedEvent.OutputTuple,
    AllocatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "AllocatorRemoved"
  ): TypedContractEvent<
    AllocatorRemovedEvent.InputTuple,
    AllocatorRemovedEvent.OutputTuple,
    AllocatorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MaciSet"
  ): TypedContractEvent<
    MaciSetEvent.InputTuple,
    MaciSetEvent.OutputTuple,
    MaciSetEvent.OutputObject
  >;
  getEvent(
    key: "RecipientStatusUpdated"
  ): TypedContractEvent<
    RecipientStatusUpdatedEvent.InputTuple,
    RecipientStatusUpdatedEvent.OutputTuple,
    RecipientStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RecipientVotingOptionAdded"
  ): TypedContractEvent<
    RecipientVotingOptionAddedEvent.InputTuple,
    RecipientVotingOptionAddedEvent.OutputTuple,
    RecipientVotingOptionAddedEvent.OutputObject
  >;
  getEvent(
    key: "Reviewed"
  ): TypedContractEvent<
    ReviewedEvent.InputTuple,
    ReviewedEvent.OutputTuple,
    ReviewedEvent.OutputObject
  >;
  getEvent(
    key: "TallyPublished"
  ): TypedContractEvent<
    TallyPublishedEvent.InputTuple,
    TallyPublishedEvent.OutputTuple,
    TallyPublishedEvent.OutputObject
  >;
  getEvent(
    key: "TallyResultsAdded"
  ): TypedContractEvent<
    TallyResultsAddedEvent.InputTuple,
    TallyResultsAddedEvent.OutputTuple,
    TallyResultsAddedEvent.OutputObject
  >;
  getEvent(
    key: "TimestampsUpdated"
  ): TypedContractEvent<
    TimestampsUpdatedEvent.InputTuple,
    TimestampsUpdatedEvent.OutputTuple,
    TimestampsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedRegistration"
  ): TypedContractEvent<
    UpdatedRegistrationEvent.InputTuple,
    UpdatedRegistrationEvent.OutputTuple,
    UpdatedRegistrationEvent.OutputObject
  >;

  filters: {
    "Allocated(address,uint256,address)": TypedContractEvent<
      AllocatedEvent.InputTuple,
      AllocatedEvent.OutputTuple,
      AllocatedEvent.OutputObject
    >;
    Allocated: TypedContractEvent<
      AllocatedEvent.InputTuple,
      AllocatedEvent.OutputTuple,
      AllocatedEvent.OutputObject
    >;

    "AllocatorAdded(address,address)": TypedContractEvent<
      AllocatorAddedEvent.InputTuple,
      AllocatorAddedEvent.OutputTuple,
      AllocatorAddedEvent.OutputObject
    >;
    AllocatorAdded: TypedContractEvent<
      AllocatorAddedEvent.InputTuple,
      AllocatorAddedEvent.OutputTuple,
      AllocatorAddedEvent.OutputObject
    >;

    "AllocatorRemoved(address,address)": TypedContractEvent<
      AllocatorRemovedEvent.InputTuple,
      AllocatorRemovedEvent.OutputTuple,
      AllocatorRemovedEvent.OutputObject
    >;
    AllocatorRemoved: TypedContractEvent<
      AllocatorRemovedEvent.InputTuple,
      AllocatorRemovedEvent.OutputTuple,
      AllocatorRemovedEvent.OutputObject
    >;

    "MaciSet(address,address,address,address,address)": TypedContractEvent<
      MaciSetEvent.InputTuple,
      MaciSetEvent.OutputTuple,
      MaciSetEvent.OutputObject
    >;
    MaciSet: TypedContractEvent<
      MaciSetEvent.InputTuple,
      MaciSetEvent.OutputTuple,
      MaciSetEvent.OutputObject
    >;

    "RecipientStatusUpdated(address,uint256,uint8,address)": TypedContractEvent<
      RecipientStatusUpdatedEvent.InputTuple,
      RecipientStatusUpdatedEvent.OutputTuple,
      RecipientStatusUpdatedEvent.OutputObject
    >;
    RecipientStatusUpdated: TypedContractEvent<
      RecipientStatusUpdatedEvent.InputTuple,
      RecipientStatusUpdatedEvent.OutputTuple,
      RecipientStatusUpdatedEvent.OutputObject
    >;

    "RecipientVotingOptionAdded(address,uint256)": TypedContractEvent<
      RecipientVotingOptionAddedEvent.InputTuple,
      RecipientVotingOptionAddedEvent.OutputTuple,
      RecipientVotingOptionAddedEvent.OutputObject
    >;
    RecipientVotingOptionAdded: TypedContractEvent<
      RecipientVotingOptionAddedEvent.InputTuple,
      RecipientVotingOptionAddedEvent.OutputTuple,
      RecipientVotingOptionAddedEvent.OutputObject
    >;

    "Reviewed(address,uint256,uint8,address)": TypedContractEvent<
      ReviewedEvent.InputTuple,
      ReviewedEvent.OutputTuple,
      ReviewedEvent.OutputObject
    >;
    Reviewed: TypedContractEvent<
      ReviewedEvent.InputTuple,
      ReviewedEvent.OutputTuple,
      ReviewedEvent.OutputObject
    >;

    "TallyPublished(string)": TypedContractEvent<
      TallyPublishedEvent.InputTuple,
      TallyPublishedEvent.OutputTuple,
      TallyPublishedEvent.OutputObject
    >;
    TallyPublished: TypedContractEvent<
      TallyPublishedEvent.InputTuple,
      TallyPublishedEvent.OutputTuple,
      TallyPublishedEvent.OutputObject
    >;

    "TallyResultsAdded(uint256,uint256)": TypedContractEvent<
      TallyResultsAddedEvent.InputTuple,
      TallyResultsAddedEvent.OutputTuple,
      TallyResultsAddedEvent.OutputObject
    >;
    TallyResultsAdded: TypedContractEvent<
      TallyResultsAddedEvent.InputTuple,
      TallyResultsAddedEvent.OutputTuple,
      TallyResultsAddedEvent.OutputObject
    >;

    "TimestampsUpdated(uint64,uint64,uint64,uint64,address)": TypedContractEvent<
      TimestampsUpdatedEvent.InputTuple,
      TimestampsUpdatedEvent.OutputTuple,
      TimestampsUpdatedEvent.OutputObject
    >;
    TimestampsUpdated: TypedContractEvent<
      TimestampsUpdatedEvent.InputTuple,
      TimestampsUpdatedEvent.OutputTuple,
      TimestampsUpdatedEvent.OutputObject
    >;

    "UpdatedRegistration(address,uint256,bytes,address,uint8)": TypedContractEvent<
      UpdatedRegistrationEvent.InputTuple,
      UpdatedRegistrationEvent.OutputTuple,
      UpdatedRegistrationEvent.OutputObject
    >;
    UpdatedRegistration: TypedContractEvent<
      UpdatedRegistrationEvent.InputTuple,
      UpdatedRegistrationEvent.OutputTuple,
      UpdatedRegistrationEvent.OutputObject
    >;
  };
}
