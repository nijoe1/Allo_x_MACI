/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type MetadataStruct = { protocol: BigNumberish; pointer: string };

export type MetadataStructOutput = [protocol: bigint, pointer: string] & {
  protocol: bigint;
  pointer: string;
};

export declare namespace IStrategy {
  export type PayoutSummaryStruct = {
    recipientAddress: AddressLike;
    amount: BigNumberish;
  };

  export type PayoutSummaryStructOutput = [
    recipientAddress: string,
    amount: bigint
  ] & { recipientAddress: string; amount: bigint };
}

export declare namespace DomainObjs {
  export type PubKeyStruct = { x: BigNumberish; y: BigNumberish };

  export type PubKeyStructOutput = [x: bigint, y: bigint] & {
    x: bigint;
    y: bigint;
  };
}

export interface QVMACIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MESSAGE_DATA_LENGTH"
      | "NATIVE"
      | "TREE_ARITY"
      | "_addTallyResult"
      | "_maci"
      | "_pollContracts"
      | "addAllocator"
      | "allocate"
      | "allocationEndTime"
      | "allocationStartTime"
      | "allowedAllocators"
      | "coordinator"
      | "coordinatorPubKey"
      | "distribute"
      | "distributionStarted"
      | "finalize"
      | "getAllo"
      | "getPayouts"
      | "getPoolAmount"
      | "getPoolId"
      | "getRecipientStatus"
      | "getStrategyId"
      | "getVoiceCredits"
      | "increasePoolAmount"
      | "initialize"
      | "isFinalized"
      | "isPoolActive"
      | "isValidAllocator"
      | "maciFactory"
      | "maxVoiceCreditsPerAllocator"
      | "metadataRequired"
      | "multicall"
      | "paidOut"
      | "publishTallyHash"
      | "recipientIdToIndex"
      | "recipientIndexToAddress"
      | "recipients"
      | "register"
      | "registerRecipient"
      | "registrationEndTime"
      | "registrationStartTime"
      | "registryGating"
      | "removeAllocator"
      | "reviewRecipients"
      | "reviewThreshold"
      | "reviewedByManager"
      | "reviewsByStatus"
      | "signup"
      | "tallyHash"
      | "totalRecipientVotes"
      | "totalTallyResults"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Allocated(address,uint256,address)"
      | "Allocated(address,uint256,address,address)"
      | "AllocatorAdded"
      | "AllocatorRemoved"
      | "Distributed"
      | "Initialized"
      | "MaciSet"
      | "PoolActive"
      | "RecipientStatusUpdated"
      | "RecipientVotingOptionAdded"
      | "Registered"
      | "Reviewed"
      | "TallyPublished"
      | "TallyResultsAdded"
      | "TimestampsUpdated"
      | "UpdatedRegistration"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MESSAGE_DATA_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NATIVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TREE_ARITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_addTallyResult",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[][],
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "_maci", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_pollContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAllocator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocate",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocationEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocationStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAllocators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "coordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinatorPubKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [AddressLike[], BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getAllo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPayouts",
    values: [AddressLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPoolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRecipientStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoiceCredits",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePoolAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidAllocator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maciFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxVoiceCreditsPerAllocator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metadataRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "paidOut",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publishTallyHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientIdToIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientIndexToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recipients",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRecipient",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registrationStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registryGating",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllocator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewRecipients",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewedByManager",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewsByStatus",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signup",
    values: [DomainObjs.PubKeyStruct]
  ): string;
  encodeFunctionData(functionFragment: "tallyHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalRecipientVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTallyResults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MESSAGE_DATA_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NATIVE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TREE_ARITY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_addTallyResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_maci", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_pollContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocationEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocationStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedAllocators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinatorPubKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributionStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPayouts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoiceCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maciFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxVoiceCreditsPerAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paidOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishTallyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientIdToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientIndexToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recipients", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registryGating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewedByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewsByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tallyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRecipientVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTallyResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace Allocated_address_uint256_address_Event {
  export type InputTuple = [
    recipientId: AddressLike,
    votes: BigNumberish,
    allocator: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    votes: bigint,
    allocator: string
  ];
  export interface OutputObject {
    recipientId: string;
    votes: bigint;
    allocator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Allocated_address_uint256_address_address_Event {
  export type InputTuple = [
    recipientId: AddressLike,
    amount: BigNumberish,
    token: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    amount: bigint,
    token: string,
    sender: string
  ];
  export interface OutputObject {
    recipientId: string;
    amount: bigint;
    token: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllocatorAddedEvent {
  export type InputTuple = [allocator: AddressLike, sender: AddressLike];
  export type OutputTuple = [allocator: string, sender: string];
  export interface OutputObject {
    allocator: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllocatorRemovedEvent {
  export type InputTuple = [allocator: AddressLike, sender: AddressLike];
  export type OutputTuple = [allocator: string, sender: string];
  export interface OutputObject {
    allocator: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    recipientAddress: AddressLike,
    amount: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    recipientAddress: string,
    amount: bigint,
    sender: string
  ];
  export interface OutputObject {
    recipientId: string;
    recipientAddress: string;
    amount: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [poolId: BigNumberish, data: BytesLike];
  export type OutputTuple = [poolId: bigint, data: string];
  export interface OutputObject {
    poolId: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaciSetEvent {
  export type InputTuple = [
    maci: AddressLike,
    poll: AddressLike,
    messageProcessor: AddressLike,
    tally: AddressLike,
    subsidy: AddressLike
  ];
  export type OutputTuple = [
    maci: string,
    poll: string,
    messageProcessor: string,
    tally: string,
    subsidy: string
  ];
  export interface OutputObject {
    maci: string;
    poll: string;
    messageProcessor: string;
    tally: string;
    subsidy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolActiveEvent {
  export type InputTuple = [active: boolean];
  export type OutputTuple = [active: boolean];
  export interface OutputObject {
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientStatusUpdatedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    applicationId: BigNumberish,
    status: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    applicationId: bigint,
    status: bigint,
    sender: string
  ];
  export interface OutputObject {
    recipientId: string;
    applicationId: bigint;
    status: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientVotingOptionAddedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    recipientIndex: BigNumberish
  ];
  export type OutputTuple = [recipientId: string, recipientIndex: bigint];
  export interface OutputObject {
    recipientId: string;
    recipientIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisteredEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    data: BytesLike,
    sender: AddressLike
  ];
  export type OutputTuple = [recipientId: string, data: string, sender: string];
  export interface OutputObject {
    recipientId: string;
    data: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    applicationId: BigNumberish,
    status: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    applicationId: bigint,
    status: bigint,
    sender: string
  ];
  export interface OutputObject {
    recipientId: string;
    applicationId: bigint;
    status: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TallyPublishedEvent {
  export type InputTuple = [tallyHash: string];
  export type OutputTuple = [tallyHash: string];
  export interface OutputObject {
    tallyHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TallyResultsAddedEvent {
  export type InputTuple = [voteOptionIndex: BigNumberish, tally: BigNumberish];
  export type OutputTuple = [voteOptionIndex: bigint, tally: bigint];
  export interface OutputObject {
    voteOptionIndex: bigint;
    tally: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimestampsUpdatedEvent {
  export type InputTuple = [
    registrationStartTime: BigNumberish,
    registrationEndTime: BigNumberish,
    allocationStartTime: BigNumberish,
    allocationEndTime: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    registrationStartTime: bigint,
    registrationEndTime: bigint,
    allocationStartTime: bigint,
    allocationEndTime: bigint,
    sender: string
  ];
  export interface OutputObject {
    registrationStartTime: bigint;
    registrationEndTime: bigint;
    allocationStartTime: bigint;
    allocationEndTime: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedRegistrationEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    applicationId: BigNumberish,
    data: BytesLike,
    sender: AddressLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    recipientId: string,
    applicationId: bigint,
    data: string,
    sender: string,
    status: bigint
  ];
  export interface OutputObject {
    recipientId: string;
    applicationId: bigint;
    data: string;
    sender: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QVMACI extends BaseContract {
  connect(runner?: ContractRunner | null): QVMACI;
  waitForDeployment(): Promise<this>;

  interface: QVMACIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MESSAGE_DATA_LENGTH: TypedContractMethod<[], [bigint], "view">;

  NATIVE: TypedContractMethod<[], [string], "view">;

  TREE_ARITY: TypedContractMethod<[], [bigint], "view">;

  _addTallyResult: TypedContractMethod<
    [
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spentVoiceCreditsHash: BigNumberish,
      _perVOSpentVoiceCreditsHash: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  _maci: TypedContractMethod<[], [string], "view">;

  _pollContracts: TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        poll: string;
        messageProcessor: string;
        tally: string;
        subsidy: string;
      }
    ],
    "view"
  >;

  addAllocator: TypedContractMethod<
    [_allocator: AddressLike],
    [void],
    "nonpayable"
  >;

  allocate: TypedContractMethod<
    [_data: BytesLike, _sender: AddressLike],
    [void],
    "payable"
  >;

  allocationEndTime: TypedContractMethod<[], [bigint], "view">;

  allocationStartTime: TypedContractMethod<[], [bigint], "view">;

  allowedAllocators: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  coordinator: TypedContractMethod<[], [string], "view">;

  coordinatorPubKey: TypedContractMethod<
    [],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;

  distribute: TypedContractMethod<
    [_recipientIds: AddressLike[], _data: BytesLike, _sender: AddressLike],
    [void],
    "nonpayable"
  >;

  distributionStarted: TypedContractMethod<[], [boolean], "view">;

  finalize: TypedContractMethod<
    [
      _totalSpent: BigNumberish,
      _totalSpentSalt: BigNumberish,
      _newResultCommitment: BigNumberish,
      _perVOSpentVoiceCreditsHash: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getAllo: TypedContractMethod<[], [string], "view">;

  getPayouts: TypedContractMethod<
    [_recipientIds: AddressLike[], _data: BytesLike[]],
    [IStrategy.PayoutSummaryStructOutput[]],
    "view"
  >;

  getPoolAmount: TypedContractMethod<[], [bigint], "view">;

  getPoolId: TypedContractMethod<[], [bigint], "view">;

  getRecipientStatus: TypedContractMethod<
    [_recipientId: AddressLike],
    [bigint],
    "view"
  >;

  getStrategyId: TypedContractMethod<[], [string], "view">;

  getVoiceCredits: TypedContractMethod<
    [arg0: AddressLike, _data: BytesLike],
    [bigint],
    "view"
  >;

  increasePoolAmount: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_poolId: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  isFinalized: TypedContractMethod<[], [boolean], "view">;

  isPoolActive: TypedContractMethod<[], [boolean], "view">;

  isValidAllocator: TypedContractMethod<
    [_allocator: AddressLike],
    [boolean],
    "view"
  >;

  maciFactory: TypedContractMethod<[], [string], "view">;

  maxVoiceCreditsPerAllocator: TypedContractMethod<[], [bigint], "view">;

  metadataRequired: TypedContractMethod<[], [boolean], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  paidOut: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  publishTallyHash: TypedContractMethod<
    [_tallyHash: string],
    [void],
    "nonpayable"
  >;

  recipientIdToIndex: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  recipientIndexToAddress: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  recipients: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        boolean,
        string,
        MetadataStructOutput,
        bigint,
        boolean,
        bigint
      ] & {
        totalVotesReceived: bigint;
        useRegistryAnchor: boolean;
        recipientAddress: string;
        metadata: MetadataStructOutput;
        recipientStatus: bigint;
        tallyVerified: boolean;
        applicationId: bigint;
      }
    ],
    "view"
  >;

  register: TypedContractMethod<
    [arg0: AddressLike, _data: BytesLike],
    [void],
    "view"
  >;

  registerRecipient: TypedContractMethod<
    [_data: BytesLike, _sender: AddressLike],
    [string],
    "payable"
  >;

  registrationEndTime: TypedContractMethod<[], [bigint], "view">;

  registrationStartTime: TypedContractMethod<[], [bigint], "view">;

  registryGating: TypedContractMethod<[], [boolean], "view">;

  removeAllocator: TypedContractMethod<
    [_allocator: AddressLike],
    [void],
    "nonpayable"
  >;

  reviewRecipients: TypedContractMethod<
    [_recipientIds: AddressLike[], _recipientStatuses: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  reviewThreshold: TypedContractMethod<[], [bigint], "view">;

  reviewedByManager: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [bigint],
    "view"
  >;

  reviewsByStatus: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  signup: TypedContractMethod<
    [pubKey: DomainObjs.PubKeyStruct],
    [void],
    "nonpayable"
  >;

  tallyHash: TypedContractMethod<[], [string], "view">;

  totalRecipientVotes: TypedContractMethod<[], [bigint], "view">;

  totalTallyResults: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MESSAGE_DATA_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NATIVE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TREE_ARITY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_addTallyResult"
  ): TypedContractMethod<
    [
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spentVoiceCreditsHash: BigNumberish,
      _perVOSpentVoiceCreditsHash: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_maci"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_pollContracts"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        poll: string;
        messageProcessor: string;
        tally: string;
        subsidy: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addAllocator"
  ): TypedContractMethod<[_allocator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allocate"
  ): TypedContractMethod<
    [_data: BytesLike, _sender: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "allocationEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allocationStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowedAllocators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "coordinator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "coordinatorPubKey"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "distribute"
  ): TypedContractMethod<
    [_recipientIds: AddressLike[], _data: BytesLike, _sender: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributionStarted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "finalize"
  ): TypedContractMethod<
    [
      _totalSpent: BigNumberish,
      _totalSpentSalt: BigNumberish,
      _newResultCommitment: BigNumberish,
      _perVOSpentVoiceCreditsHash: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPayouts"
  ): TypedContractMethod<
    [_recipientIds: AddressLike[], _data: BytesLike[]],
    [IStrategy.PayoutSummaryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRecipientStatus"
  ): TypedContractMethod<[_recipientId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStrategyId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVoiceCredits"
  ): TypedContractMethod<
    [arg0: AddressLike, _data: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "increasePoolAmount"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_poolId: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isFinalized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPoolActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidAllocator"
  ): TypedContractMethod<[_allocator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maciFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxVoiceCreditsPerAllocator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "metadataRequired"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "paidOut"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "publishTallyHash"
  ): TypedContractMethod<[_tallyHash: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recipientIdToIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "recipientIndexToAddress"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "recipients"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        boolean,
        string,
        MetadataStructOutput,
        bigint,
        boolean,
        bigint
      ] & {
        totalVotesReceived: bigint;
        useRegistryAnchor: boolean;
        recipientAddress: string;
        metadata: MetadataStructOutput;
        recipientStatus: bigint;
        tallyVerified: boolean;
        applicationId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[arg0: AddressLike, _data: BytesLike], [void], "view">;
  getFunction(
    nameOrSignature: "registerRecipient"
  ): TypedContractMethod<
    [_data: BytesLike, _sender: AddressLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registrationEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registrationStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registryGating"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeAllocator"
  ): TypedContractMethod<[_allocator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reviewRecipients"
  ): TypedContractMethod<
    [_recipientIds: AddressLike[], _recipientStatuses: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reviewThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reviewedByManager"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "reviewsByStatus"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "signup"
  ): TypedContractMethod<
    [pubKey: DomainObjs.PubKeyStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tallyHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalRecipientVotes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTallyResults"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Allocated(address,uint256,address)"
  ): TypedContractEvent<
    Allocated_address_uint256_address_Event.InputTuple,
    Allocated_address_uint256_address_Event.OutputTuple,
    Allocated_address_uint256_address_Event.OutputObject
  >;
  getEvent(
    key: "Allocated(address,uint256,address,address)"
  ): TypedContractEvent<
    Allocated_address_uint256_address_address_Event.InputTuple,
    Allocated_address_uint256_address_address_Event.OutputTuple,
    Allocated_address_uint256_address_address_Event.OutputObject
  >;
  getEvent(
    key: "AllocatorAdded"
  ): TypedContractEvent<
    AllocatorAddedEvent.InputTuple,
    AllocatorAddedEvent.OutputTuple,
    AllocatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "AllocatorRemoved"
  ): TypedContractEvent<
    AllocatorRemovedEvent.InputTuple,
    AllocatorRemovedEvent.OutputTuple,
    AllocatorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Distributed"
  ): TypedContractEvent<
    DistributedEvent.InputTuple,
    DistributedEvent.OutputTuple,
    DistributedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MaciSet"
  ): TypedContractEvent<
    MaciSetEvent.InputTuple,
    MaciSetEvent.OutputTuple,
    MaciSetEvent.OutputObject
  >;
  getEvent(
    key: "PoolActive"
  ): TypedContractEvent<
    PoolActiveEvent.InputTuple,
    PoolActiveEvent.OutputTuple,
    PoolActiveEvent.OutputObject
  >;
  getEvent(
    key: "RecipientStatusUpdated"
  ): TypedContractEvent<
    RecipientStatusUpdatedEvent.InputTuple,
    RecipientStatusUpdatedEvent.OutputTuple,
    RecipientStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RecipientVotingOptionAdded"
  ): TypedContractEvent<
    RecipientVotingOptionAddedEvent.InputTuple,
    RecipientVotingOptionAddedEvent.OutputTuple,
    RecipientVotingOptionAddedEvent.OutputObject
  >;
  getEvent(
    key: "Registered"
  ): TypedContractEvent<
    RegisteredEvent.InputTuple,
    RegisteredEvent.OutputTuple,
    RegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Reviewed"
  ): TypedContractEvent<
    ReviewedEvent.InputTuple,
    ReviewedEvent.OutputTuple,
    ReviewedEvent.OutputObject
  >;
  getEvent(
    key: "TallyPublished"
  ): TypedContractEvent<
    TallyPublishedEvent.InputTuple,
    TallyPublishedEvent.OutputTuple,
    TallyPublishedEvent.OutputObject
  >;
  getEvent(
    key: "TallyResultsAdded"
  ): TypedContractEvent<
    TallyResultsAddedEvent.InputTuple,
    TallyResultsAddedEvent.OutputTuple,
    TallyResultsAddedEvent.OutputObject
  >;
  getEvent(
    key: "TimestampsUpdated"
  ): TypedContractEvent<
    TimestampsUpdatedEvent.InputTuple,
    TimestampsUpdatedEvent.OutputTuple,
    TimestampsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedRegistration"
  ): TypedContractEvent<
    UpdatedRegistrationEvent.InputTuple,
    UpdatedRegistrationEvent.OutputTuple,
    UpdatedRegistrationEvent.OutputObject
  >;

  filters: {
    "Allocated(address,uint256,address)": TypedContractEvent<
      Allocated_address_uint256_address_Event.InputTuple,
      Allocated_address_uint256_address_Event.OutputTuple,
      Allocated_address_uint256_address_Event.OutputObject
    >;
    "Allocated(address,uint256,address,address)": TypedContractEvent<
      Allocated_address_uint256_address_address_Event.InputTuple,
      Allocated_address_uint256_address_address_Event.OutputTuple,
      Allocated_address_uint256_address_address_Event.OutputObject
    >;

    "AllocatorAdded(address,address)": TypedContractEvent<
      AllocatorAddedEvent.InputTuple,
      AllocatorAddedEvent.OutputTuple,
      AllocatorAddedEvent.OutputObject
    >;
    AllocatorAdded: TypedContractEvent<
      AllocatorAddedEvent.InputTuple,
      AllocatorAddedEvent.OutputTuple,
      AllocatorAddedEvent.OutputObject
    >;

    "AllocatorRemoved(address,address)": TypedContractEvent<
      AllocatorRemovedEvent.InputTuple,
      AllocatorRemovedEvent.OutputTuple,
      AllocatorRemovedEvent.OutputObject
    >;
    AllocatorRemoved: TypedContractEvent<
      AllocatorRemovedEvent.InputTuple,
      AllocatorRemovedEvent.OutputTuple,
      AllocatorRemovedEvent.OutputObject
    >;

    "Distributed(address,address,uint256,address)": TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;
    Distributed: TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;

    "Initialized(uint256,bytes)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MaciSet(address,address,address,address,address)": TypedContractEvent<
      MaciSetEvent.InputTuple,
      MaciSetEvent.OutputTuple,
      MaciSetEvent.OutputObject
    >;
    MaciSet: TypedContractEvent<
      MaciSetEvent.InputTuple,
      MaciSetEvent.OutputTuple,
      MaciSetEvent.OutputObject
    >;

    "PoolActive(bool)": TypedContractEvent<
      PoolActiveEvent.InputTuple,
      PoolActiveEvent.OutputTuple,
      PoolActiveEvent.OutputObject
    >;
    PoolActive: TypedContractEvent<
      PoolActiveEvent.InputTuple,
      PoolActiveEvent.OutputTuple,
      PoolActiveEvent.OutputObject
    >;

    "RecipientStatusUpdated(address,uint256,uint8,address)": TypedContractEvent<
      RecipientStatusUpdatedEvent.InputTuple,
      RecipientStatusUpdatedEvent.OutputTuple,
      RecipientStatusUpdatedEvent.OutputObject
    >;
    RecipientStatusUpdated: TypedContractEvent<
      RecipientStatusUpdatedEvent.InputTuple,
      RecipientStatusUpdatedEvent.OutputTuple,
      RecipientStatusUpdatedEvent.OutputObject
    >;

    "RecipientVotingOptionAdded(address,uint256)": TypedContractEvent<
      RecipientVotingOptionAddedEvent.InputTuple,
      RecipientVotingOptionAddedEvent.OutputTuple,
      RecipientVotingOptionAddedEvent.OutputObject
    >;
    RecipientVotingOptionAdded: TypedContractEvent<
      RecipientVotingOptionAddedEvent.InputTuple,
      RecipientVotingOptionAddedEvent.OutputTuple,
      RecipientVotingOptionAddedEvent.OutputObject
    >;

    "Registered(address,bytes,address)": TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
    Registered: TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;

    "Reviewed(address,uint256,uint8,address)": TypedContractEvent<
      ReviewedEvent.InputTuple,
      ReviewedEvent.OutputTuple,
      ReviewedEvent.OutputObject
    >;
    Reviewed: TypedContractEvent<
      ReviewedEvent.InputTuple,
      ReviewedEvent.OutputTuple,
      ReviewedEvent.OutputObject
    >;

    "TallyPublished(string)": TypedContractEvent<
      TallyPublishedEvent.InputTuple,
      TallyPublishedEvent.OutputTuple,
      TallyPublishedEvent.OutputObject
    >;
    TallyPublished: TypedContractEvent<
      TallyPublishedEvent.InputTuple,
      TallyPublishedEvent.OutputTuple,
      TallyPublishedEvent.OutputObject
    >;

    "TallyResultsAdded(uint256,uint256)": TypedContractEvent<
      TallyResultsAddedEvent.InputTuple,
      TallyResultsAddedEvent.OutputTuple,
      TallyResultsAddedEvent.OutputObject
    >;
    TallyResultsAdded: TypedContractEvent<
      TallyResultsAddedEvent.InputTuple,
      TallyResultsAddedEvent.OutputTuple,
      TallyResultsAddedEvent.OutputObject
    >;

    "TimestampsUpdated(uint64,uint64,uint64,uint64,address)": TypedContractEvent<
      TimestampsUpdatedEvent.InputTuple,
      TimestampsUpdatedEvent.OutputTuple,
      TimestampsUpdatedEvent.OutputObject
    >;
    TimestampsUpdated: TypedContractEvent<
      TimestampsUpdatedEvent.InputTuple,
      TimestampsUpdatedEvent.OutputTuple,
      TimestampsUpdatedEvent.OutputObject
    >;

    "UpdatedRegistration(address,uint256,bytes,address,uint8)": TypedContractEvent<
      UpdatedRegistrationEvent.InputTuple,
      UpdatedRegistrationEvent.OutputTuple,
      UpdatedRegistrationEvent.OutputObject
    >;
    UpdatedRegistration: TypedContractEvent<
      UpdatedRegistrationEvent.InputTuple,
      UpdatedRegistrationEvent.OutputTuple,
      UpdatedRegistrationEvent.OutputObject
    >;
  };
}
