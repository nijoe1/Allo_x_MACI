/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Holder__factory>;
    getContractFactory(
      name: "ERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Holder__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "ClonableAccQueueQuinaryBlankSl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClonableAccQueueQuinaryBlankSl__factory>;
    getContractFactory(
      name: "ClonableAccQueueQuinaryMaci",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClonableAccQueueQuinaryMaci__factory>;
    getContractFactory(
      name: "ClonableMACI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClonableMACI__factory>;
    getContractFactory(
      name: "ClonableMACIFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClonableMACIFactory__factory>;
    getContractFactory(
      name: "ClonableMessageProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClonableMessageProcessor__factory>;
    getContractFactory(
      name: "ClonablePoll",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClonablePoll__factory>;
    getContractFactory(
      name: "ClonableTally",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClonableTally__factory>;
    getContractFactory(
      name: "Allo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Allo__factory>;
    getContractFactory(
      name: "Anchor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Anchor__factory>;
    getContractFactory(
      name: "IAllo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAllo__factory>;
    getContractFactory(
      name: "IAnchor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAnchor__factory>;
    getContractFactory(
      name: "IRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegistry__factory>;
    getContractFactory(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "Native",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Native__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "Transfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Transfer__factory>;
    getContractFactory(
      name: "CREATE3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CREATE3__factory>;
    getContractFactory(
      name: "SafeTransferLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeTransferLib__factory>;
    getContractFactory(
      name: "Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Registry__factory>;
    getContractFactory(
      name: "ContractFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractFactory__factory>;
    getContractFactory(
      name: "CreateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CreateStrategy__factory>;
    getContractFactory(
      name: "Dai",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Dai__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStrategy__factory>;
    getContractFactory(
      name: "Contrants",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Contrants__factory>;
    getContractFactory(
      name: "QVMACI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QVMACI__factory>;
    getContractFactory(
      name: "QVMACIBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QVMACIBase__factory>;
    getContractFactory(
      name: "HasherBenchmarks",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HasherBenchmarks__factory>;
    getContractFactory(
      name: "Hasher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Hasher__factory>;
    getContractFactory(
      name: "MockVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVerifier__factory>;
    getContractFactory(
      name: "Pairing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pairing__factory>;
    getContractFactory(
      name: "PoseidonT3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT3__factory>;
    getContractFactory(
      name: "PoseidonT4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT4__factory>;
    getContractFactory(
      name: "PoseidonT5",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT5__factory>;
    getContractFactory(
      name: "PoseidonT6",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT6__factory>;
    getContractFactory(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier__factory>;
    getContractFactory(
      name: "EASGatekeeper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EASGatekeeper__factory>;
    getContractFactory(
      name: "FreeForAllGatekeeper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FreeForAllGatekeeper__factory>;
    getContractFactory(
      name: "SignUpGatekeeper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignUpGatekeeper__factory>;
    getContractFactory(
      name: "SignUpTokenGatekeeper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignUpTokenGatekeeper__factory>;
    getContractFactory(
      name: "ConstantInitialVoiceCreditProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConstantInitialVoiceCreditProxy__factory>;
    getContractFactory(
      name: "InitialVoiceCreditProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitialVoiceCreditProxy__factory>;
    getContractFactory(
      name: "IEAS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEAS__factory>;
    getContractFactory(
      name: "IMACI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMACI__factory>;
    getContractFactory(
      name: "IMessageProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageProcessor__factory>;
    getContractFactory(
      name: "IMessageProcessorFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageProcessorFactory__factory>;
    getContractFactory(
      name: "IPoll",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoll__factory>;
    getContractFactory(
      name: "IPollFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPollFactory__factory>;
    getContractFactory(
      name: "ITallySubsidyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITallySubsidyFactory__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "IVkRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVkRegistry__factory>;
    getContractFactory(
      name: "MACI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MACI__factory>;
    getContractFactory(
      name: "MessageProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageProcessor__factory>;
    getContractFactory(
      name: "MessageProcessorFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageProcessorFactory__factory>;
    getContractFactory(
      name: "Poll",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Poll__factory>;
    getContractFactory(
      name: "PollFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PollFactory__factory>;
    getContractFactory(
      name: "SignUpToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignUpToken__factory>;
    getContractFactory(
      name: "Subsidy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Subsidy__factory>;
    getContractFactory(
      name: "SubsidyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SubsidyFactory__factory>;
    getContractFactory(
      name: "Tally",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Tally__factory>;
    getContractFactory(
      name: "TallyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TallyFactory__factory>;
    getContractFactory(
      name: "TallyNonQv",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TallyNonQv__factory>;
    getContractFactory(
      name: "TallyNonQvFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TallyNonQvFactory__factory>;
    getContractFactory(
      name: "TopupCredit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TopupCredit__factory>;
    getContractFactory(
      name: "AccQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccQueue__factory>;
    getContractFactory(
      name: "AccQueueBinary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccQueueBinary__factory>;
    getContractFactory(
      name: "AccQueueBinary0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccQueueBinary0__factory>;
    getContractFactory(
      name: "AccQueueBinaryMaci",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccQueueBinaryMaci__factory>;
    getContractFactory(
      name: "AccQueueQuinary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccQueueQuinary__factory>;
    getContractFactory(
      name: "AccQueueQuinary0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccQueueQuinary0__factory>;
    getContractFactory(
      name: "AccQueueQuinaryBlankSl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccQueueQuinaryBlankSl__factory>;
    getContractFactory(
      name: "AccQueueQuinaryMaci",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccQueueQuinaryMaci__factory>;
    getContractFactory(
      name: "CommonUtilities",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CommonUtilities__factory>;
    getContractFactory(
      name: "DomainObjs",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DomainObjs__factory>;
    getContractFactory(
      name: "Utilities",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Utilities__factory>;
    getContractFactory(
      name: "VkRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VkRegistry__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155Holder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Holder>;
    getContractAt(
      name: "ERC1155Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC721Holder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Holder>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Multicall",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "ClonableAccQueueQuinaryBlankSl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClonableAccQueueQuinaryBlankSl>;
    getContractAt(
      name: "ClonableAccQueueQuinaryMaci",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClonableAccQueueQuinaryMaci>;
    getContractAt(
      name: "ClonableMACI",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClonableMACI>;
    getContractAt(
      name: "ClonableMACIFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClonableMACIFactory>;
    getContractAt(
      name: "ClonableMessageProcessor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClonableMessageProcessor>;
    getContractAt(
      name: "ClonablePoll",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClonablePoll>;
    getContractAt(
      name: "ClonableTally",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClonableTally>;
    getContractAt(
      name: "Allo",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Allo>;
    getContractAt(
      name: "Anchor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Anchor>;
    getContractAt(
      name: "IAllo",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAllo>;
    getContractAt(
      name: "IAnchor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAnchor>;
    getContractAt(
      name: "IRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegistry>;
    getContractAt(
      name: "IStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: "Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "Native",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Native>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "Transfer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Transfer>;
    getContractAt(
      name: "CREATE3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CREATE3>;
    getContractAt(
      name: "SafeTransferLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeTransferLib>;
    getContractAt(
      name: "Registry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Registry>;
    getContractAt(
      name: "ContractFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractFactory>;
    getContractAt(
      name: "CreateStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CreateStrategy>;
    getContractAt(
      name: "Dai",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Dai>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "BaseStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseStrategy>;
    getContractAt(
      name: "Contrants",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Contrants>;
    getContractAt(
      name: "QVMACI",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QVMACI>;
    getContractAt(
      name: "QVMACIBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QVMACIBase>;
    getContractAt(
      name: "HasherBenchmarks",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HasherBenchmarks>;
    getContractAt(
      name: "Hasher",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Hasher>;
    getContractAt(
      name: "MockVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVerifier>;
    getContractAt(
      name: "Pairing",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pairing>;
    getContractAt(
      name: "PoseidonT3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT3>;
    getContractAt(
      name: "PoseidonT4",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT4>;
    getContractAt(
      name: "PoseidonT5",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT5>;
    getContractAt(
      name: "PoseidonT6",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT6>;
    getContractAt(
      name: "Verifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier>;
    getContractAt(
      name: "EASGatekeeper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EASGatekeeper>;
    getContractAt(
      name: "FreeForAllGatekeeper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FreeForAllGatekeeper>;
    getContractAt(
      name: "SignUpGatekeeper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SignUpGatekeeper>;
    getContractAt(
      name: "SignUpTokenGatekeeper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SignUpTokenGatekeeper>;
    getContractAt(
      name: "ConstantInitialVoiceCreditProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ConstantInitialVoiceCreditProxy>;
    getContractAt(
      name: "InitialVoiceCreditProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InitialVoiceCreditProxy>;
    getContractAt(
      name: "IEAS",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEAS>;
    getContractAt(
      name: "IMACI",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMACI>;
    getContractAt(
      name: "IMessageProcessor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageProcessor>;
    getContractAt(
      name: "IMessageProcessorFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageProcessorFactory>;
    getContractAt(
      name: "IPoll",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoll>;
    getContractAt(
      name: "IPollFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPollFactory>;
    getContractAt(
      name: "ITallySubsidyFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITallySubsidyFactory>;
    getContractAt(
      name: "IVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "IVkRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVkRegistry>;
    getContractAt(
      name: "MACI",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MACI>;
    getContractAt(
      name: "MessageProcessor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageProcessor>;
    getContractAt(
      name: "MessageProcessorFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageProcessorFactory>;
    getContractAt(
      name: "Poll",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Poll>;
    getContractAt(
      name: "PollFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PollFactory>;
    getContractAt(
      name: "SignUpToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SignUpToken>;
    getContractAt(
      name: "Subsidy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Subsidy>;
    getContractAt(
      name: "SubsidyFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SubsidyFactory>;
    getContractAt(
      name: "Tally",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Tally>;
    getContractAt(
      name: "TallyFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TallyFactory>;
    getContractAt(
      name: "TallyNonQv",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TallyNonQv>;
    getContractAt(
      name: "TallyNonQvFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TallyNonQvFactory>;
    getContractAt(
      name: "TopupCredit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TopupCredit>;
    getContractAt(
      name: "AccQueue",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccQueue>;
    getContractAt(
      name: "AccQueueBinary",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccQueueBinary>;
    getContractAt(
      name: "AccQueueBinary0",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccQueueBinary0>;
    getContractAt(
      name: "AccQueueBinaryMaci",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccQueueBinaryMaci>;
    getContractAt(
      name: "AccQueueQuinary",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccQueueQuinary>;
    getContractAt(
      name: "AccQueueQuinary0",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccQueueQuinary0>;
    getContractAt(
      name: "AccQueueQuinaryBlankSl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccQueueQuinaryBlankSl>;
    getContractAt(
      name: "AccQueueQuinaryMaci",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccQueueQuinaryMaci>;
    getContractAt(
      name: "CommonUtilities",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CommonUtilities>;
    getContractAt(
      name: "DomainObjs",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DomainObjs>;
    getContractAt(
      name: "Utilities",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Utilities>;
    getContractAt(
      name: "VkRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VkRegistry>;

    deployContract(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlUpgradeable>;
    deployContract(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165Upgradeable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155Holder>;
    deployContract(
      name: "ERC1155Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155Receiver>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Holder>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall>;
    deployContract(
      name: "ClonableAccQueueQuinaryBlankSl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonableAccQueueQuinaryBlankSl>;
    deployContract(
      name: "ClonableAccQueueQuinaryMaci",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonableAccQueueQuinaryMaci>;
    deployContract(
      name: "ClonableMACI",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonableMACI>;
    deployContract(
      name: "ClonableMACIFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonableMACIFactory>;
    deployContract(
      name: "ClonableMessageProcessor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonableMessageProcessor>;
    deployContract(
      name: "ClonablePoll",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonablePoll>;
    deployContract(
      name: "ClonableTally",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonableTally>;
    deployContract(
      name: "Allo",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Allo>;
    deployContract(
      name: "Anchor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Anchor>;
    deployContract(
      name: "IAllo",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAllo>;
    deployContract(
      name: "IAnchor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAnchor>;
    deployContract(
      name: "IRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRegistry>;
    deployContract(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: "Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "Native",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Native>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "Transfer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Transfer>;
    deployContract(
      name: "CREATE3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CREATE3>;
    deployContract(
      name: "SafeTransferLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeTransferLib>;
    deployContract(
      name: "Registry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Registry>;
    deployContract(
      name: "ContractFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContractFactory>;
    deployContract(
      name: "CreateStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CreateStrategy>;
    deployContract(
      name: "Dai",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Dai>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseStrategy>;
    deployContract(
      name: "Contrants",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Contrants>;
    deployContract(
      name: "QVMACI",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QVMACI>;
    deployContract(
      name: "QVMACIBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QVMACIBase>;
    deployContract(
      name: "HasherBenchmarks",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HasherBenchmarks>;
    deployContract(
      name: "Hasher",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Hasher>;
    deployContract(
      name: "MockVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockVerifier>;
    deployContract(
      name: "Pairing",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pairing>;
    deployContract(
      name: "PoseidonT3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoseidonT3>;
    deployContract(
      name: "PoseidonT4",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoseidonT4>;
    deployContract(
      name: "PoseidonT5",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoseidonT5>;
    deployContract(
      name: "PoseidonT6",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoseidonT6>;
    deployContract(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Verifier>;
    deployContract(
      name: "EASGatekeeper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EASGatekeeper>;
    deployContract(
      name: "FreeForAllGatekeeper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FreeForAllGatekeeper>;
    deployContract(
      name: "SignUpGatekeeper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignUpGatekeeper>;
    deployContract(
      name: "SignUpTokenGatekeeper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignUpTokenGatekeeper>;
    deployContract(
      name: "ConstantInitialVoiceCreditProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConstantInitialVoiceCreditProxy>;
    deployContract(
      name: "InitialVoiceCreditProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InitialVoiceCreditProxy>;
    deployContract(
      name: "IEAS",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEAS>;
    deployContract(
      name: "IMACI",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMACI>;
    deployContract(
      name: "IMessageProcessor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageProcessor>;
    deployContract(
      name: "IMessageProcessorFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageProcessorFactory>;
    deployContract(
      name: "IPoll",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoll>;
    deployContract(
      name: "IPollFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPollFactory>;
    deployContract(
      name: "ITallySubsidyFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITallySubsidyFactory>;
    deployContract(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVerifier>;
    deployContract(
      name: "IVkRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVkRegistry>;
    deployContract(
      name: "MACI",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MACI>;
    deployContract(
      name: "MessageProcessor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageProcessor>;
    deployContract(
      name: "MessageProcessorFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageProcessorFactory>;
    deployContract(
      name: "Poll",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Poll>;
    deployContract(
      name: "PollFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PollFactory>;
    deployContract(
      name: "SignUpToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignUpToken>;
    deployContract(
      name: "Subsidy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Subsidy>;
    deployContract(
      name: "SubsidyFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubsidyFactory>;
    deployContract(
      name: "Tally",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Tally>;
    deployContract(
      name: "TallyFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TallyFactory>;
    deployContract(
      name: "TallyNonQv",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TallyNonQv>;
    deployContract(
      name: "TallyNonQvFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TallyNonQvFactory>;
    deployContract(
      name: "TopupCredit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TopupCredit>;
    deployContract(
      name: "AccQueue",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueue>;
    deployContract(
      name: "AccQueueBinary",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueBinary>;
    deployContract(
      name: "AccQueueBinary0",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueBinary0>;
    deployContract(
      name: "AccQueueBinaryMaci",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueBinaryMaci>;
    deployContract(
      name: "AccQueueQuinary",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueQuinary>;
    deployContract(
      name: "AccQueueQuinary0",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueQuinary0>;
    deployContract(
      name: "AccQueueQuinaryBlankSl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueQuinaryBlankSl>;
    deployContract(
      name: "AccQueueQuinaryMaci",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueQuinaryMaci>;
    deployContract(
      name: "CommonUtilities",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CommonUtilities>;
    deployContract(
      name: "DomainObjs",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DomainObjs>;
    deployContract(
      name: "Utilities",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Utilities>;
    deployContract(
      name: "VkRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VkRegistry>;

    deployContract(
      name: "AccessControlUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "IAccessControlUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlUpgradeable>;
    deployContract(
      name: "OwnableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "IERC20Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "IERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165Upgradeable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: "ERC1155Holder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155Holder>;
    deployContract(
      name: "ERC1155Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155Receiver>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC721Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC721Holder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Holder>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Multicall",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall>;
    deployContract(
      name: "ClonableAccQueueQuinaryBlankSl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonableAccQueueQuinaryBlankSl>;
    deployContract(
      name: "ClonableAccQueueQuinaryMaci",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonableAccQueueQuinaryMaci>;
    deployContract(
      name: "ClonableMACI",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonableMACI>;
    deployContract(
      name: "ClonableMACIFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonableMACIFactory>;
    deployContract(
      name: "ClonableMessageProcessor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonableMessageProcessor>;
    deployContract(
      name: "ClonablePoll",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonablePoll>;
    deployContract(
      name: "ClonableTally",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClonableTally>;
    deployContract(
      name: "Allo",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Allo>;
    deployContract(
      name: "Anchor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Anchor>;
    deployContract(
      name: "IAllo",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAllo>;
    deployContract(
      name: "IAnchor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAnchor>;
    deployContract(
      name: "IRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRegistry>;
    deployContract(
      name: "IStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: "Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "Native",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Native>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "Transfer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Transfer>;
    deployContract(
      name: "CREATE3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CREATE3>;
    deployContract(
      name: "SafeTransferLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeTransferLib>;
    deployContract(
      name: "Registry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Registry>;
    deployContract(
      name: "ContractFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContractFactory>;
    deployContract(
      name: "CreateStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CreateStrategy>;
    deployContract(
      name: "Dai",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Dai>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "BaseStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseStrategy>;
    deployContract(
      name: "Contrants",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Contrants>;
    deployContract(
      name: "QVMACI",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QVMACI>;
    deployContract(
      name: "QVMACIBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QVMACIBase>;
    deployContract(
      name: "HasherBenchmarks",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HasherBenchmarks>;
    deployContract(
      name: "Hasher",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Hasher>;
    deployContract(
      name: "MockVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockVerifier>;
    deployContract(
      name: "Pairing",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pairing>;
    deployContract(
      name: "PoseidonT3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoseidonT3>;
    deployContract(
      name: "PoseidonT4",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoseidonT4>;
    deployContract(
      name: "PoseidonT5",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoseidonT5>;
    deployContract(
      name: "PoseidonT6",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoseidonT6>;
    deployContract(
      name: "Verifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Verifier>;
    deployContract(
      name: "EASGatekeeper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EASGatekeeper>;
    deployContract(
      name: "FreeForAllGatekeeper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FreeForAllGatekeeper>;
    deployContract(
      name: "SignUpGatekeeper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignUpGatekeeper>;
    deployContract(
      name: "SignUpTokenGatekeeper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignUpTokenGatekeeper>;
    deployContract(
      name: "ConstantInitialVoiceCreditProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConstantInitialVoiceCreditProxy>;
    deployContract(
      name: "InitialVoiceCreditProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InitialVoiceCreditProxy>;
    deployContract(
      name: "IEAS",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEAS>;
    deployContract(
      name: "IMACI",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMACI>;
    deployContract(
      name: "IMessageProcessor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageProcessor>;
    deployContract(
      name: "IMessageProcessorFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageProcessorFactory>;
    deployContract(
      name: "IPoll",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoll>;
    deployContract(
      name: "IPollFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPollFactory>;
    deployContract(
      name: "ITallySubsidyFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITallySubsidyFactory>;
    deployContract(
      name: "IVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVerifier>;
    deployContract(
      name: "IVkRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVkRegistry>;
    deployContract(
      name: "MACI",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MACI>;
    deployContract(
      name: "MessageProcessor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageProcessor>;
    deployContract(
      name: "MessageProcessorFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageProcessorFactory>;
    deployContract(
      name: "Poll",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Poll>;
    deployContract(
      name: "PollFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PollFactory>;
    deployContract(
      name: "SignUpToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignUpToken>;
    deployContract(
      name: "Subsidy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Subsidy>;
    deployContract(
      name: "SubsidyFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubsidyFactory>;
    deployContract(
      name: "Tally",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Tally>;
    deployContract(
      name: "TallyFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TallyFactory>;
    deployContract(
      name: "TallyNonQv",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TallyNonQv>;
    deployContract(
      name: "TallyNonQvFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TallyNonQvFactory>;
    deployContract(
      name: "TopupCredit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TopupCredit>;
    deployContract(
      name: "AccQueue",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueue>;
    deployContract(
      name: "AccQueueBinary",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueBinary>;
    deployContract(
      name: "AccQueueBinary0",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueBinary0>;
    deployContract(
      name: "AccQueueBinaryMaci",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueBinaryMaci>;
    deployContract(
      name: "AccQueueQuinary",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueQuinary>;
    deployContract(
      name: "AccQueueQuinary0",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueQuinary0>;
    deployContract(
      name: "AccQueueQuinaryBlankSl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueQuinaryBlankSl>;
    deployContract(
      name: "AccQueueQuinaryMaci",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccQueueQuinaryMaci>;
    deployContract(
      name: "CommonUtilities",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CommonUtilities>;
    deployContract(
      name: "DomainObjs",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DomainObjs>;
    deployContract(
      name: "Utilities",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Utilities>;
    deployContract(
      name: "VkRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VkRegistry>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
